CRUD: A aplicação implementa rotas para pelo menos três recursos distintos e relacionados entre si, cada um contendo operações de leitura, escrita, atualização e exclusão;
ok

Arquitetura de Camadas: A arquitetura da aplicação é baseada em camadas, possuindo clara distinção e preservando as responsabilidades entre controllers, services, repositories e models/entities;
ok

Repository Pattern: A aplicação utiliza o padrão Repository para abstrair o acesso e operações no banco de dados de maneira persistente;
ok

DTO: Todos os dados enviados no corpo de requisições devem ser validados conforme as regras de negócio, usando um DTO (Data Transfer Object) separado do modelo de domínio;
ok

Status Code e JSON: Todas as respostas e erros esperados possuem um código de status HTTP apropriado e um corpo de resposta formatado em JSON;
ok

Tratamento de Erros: Todas as rotas da aplicação retornam erros de maneira clara e amigável, com o código de status HTTP apropriado e um objeto de erro formatado em JSON;
ok

Documentação: O projeto possui um arquivo README.md com instruções claras para a execução do projeto, incluindo exemplos de requisições, respostas e erros esperados para todas as rotas da aplicação (pode ser utilizado o Swagger, desde que esteja especificado seu uso no README.md);
ok

Variáveis de Ambiente: Todas as variáveis necessárias para a execução do projeto podem ser configuradas por meio de variáveis de ambiente e/ou arquivos de configuração (.env, .json, .yaml, etc.);
não tem 

Efetividade: O projeto propõe uma solução viável e efetiva, apresentando regras de negócio condizentes com o tema proposto;
ok
Cada um dos requisitos básicos serão avaliados individualmente e terão uma pontuação máxima de 1,0 ponto, com exceção da Efetividade, que terá uma pontuação máxima de 2,0 pontos.

Requisitos Opcionais
Os requisitos opcionais são aqueles que podem ser implementados para melhorar a qualidade do projeto e a nota da avaliação, especialmente se os requisitos básicos não puderem ser desenvolvidos. Estes requisitos não são obrigatórios para a aprovação.


Autenticação: A maioria das rotas da aplicação é protegida por um mecanismo de autenticação como JWT ou OAuth2, exigindo um token de acesso válido;
A aplicação foi implantada em um servidor de produção e está disponível em um servidor de público na Internet;
não tem

Testes Unitários: Os métodos implementados na camada de serviço possuem cobertura de pelo menos 80% em testes unitários dos métodos públicos na camada de serviço da aplicação;
não tem

Integração Externa: A aplicação está integrado a uma API de terceiros, sendo capaz de reconhecer exceções (quando a API não estiver disponível);
não tem

CICD: O projeto possui CICD configurado para a execução de testes, compilação e geração da imagem Docker;
não

Docker: O projeto pode ser executado de maneira simples usando o comando docker compose up --build, incluindo as variáveis de ambiente e todos os demais serviços necessários para a execução do projeto;
fazendo

Implantação Pública: O projeto foi públicado na Internet e está disponível para acesso com endereço público (pode-se utilizar provedores de núvem como o Render).
vou fazer;